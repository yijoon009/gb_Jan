한동석 강사
tedhan1204@gmail.com

수업자료 공유
	웹 하드
	kedudisk.com
	아디 : it1000
	비번 : 학생11!

	폴더명 : 한동석선생님_국비_01월
	비번 : 0900gb

커리큘럼
	JAVA, 웹표준(HTML(시맨틱 태그), CSS(반응형 개발), Javascript(jQuery)),
	 JSP(Ajax, JSON), Spring Framework
------------------------------------------------------------------------------------
프로그램
	소스코드로 잘 짜여진 틀

설치(jdk, jre, jvm)

	Program Files 경로 지우기
	C:/Java/jdk1.8.xx

IDE(eclipse photon)
	한 회사에서 하나의 프로젝트만 담당하지 않는다.
	여러 프로젝트를 다루기 위해서는 하나의 IDE가 아닌
	여러 버전의 IDE가 필요하기 때문에 무설치 버전으로 설치하는 것이
	일반적이다.	

JVM(자바 가상 운영체제)

	자바 프로그램
	JVM(운영체제의 종류에 맞게 사용자의 명령을 전송한다)
	OS(하드웨어에 적절한 전기 신호를 흘려주는 역할)
	하드웨어

JRE
	JVM을 구동시키기 위한 다양한 라이브러리 환경

JDK(javac, java)
	개발도구상자

이클립스 단축키
	alt+shift+n, 아래방향키, 엔터
	프로젝트명 입력 후 엔터
	엔터(폴더가 열린다) > 아래방향키 2번
	ctrl + n, Class 선택 후 패키지명과 클래스명 입력,  엔터

	자동정렬 : ctrl + shift + f
	자동import : ctrl + shift + o

변수(저장공간)
	어떤 값이 들어올지를 자료형으로 알려주어 선언한다.

	1. 같은 값이 반복하여 사용될 때(유지보수가 용이해진다)
	2. 값에 의미부여를 할 수 있다.

연산자(최단산쉬관리삼대)
	결합성
		동일한 연산자가 하나의 수식에 여러 개 존재할 때 알맞는 방향으로 결합되어 연산되는 성질

	우선순위
		다양한 연산자가 하나의 수식에 존재할 때 순서를 매기는 방법

		최우선
		단항
		산술
		쉬프트
		관계
		논리
		삼항
		대입


제어문(if, 삼항연산자, switch, for, while)

- 조건문
	if문과 삼항연산자(? : : : : : : : : :)

	if문은 속도가 상대적으로 느리지만 메모리를 덜 사용한다.
	삼항연산자는 속도가 빠르지만 메모리를 더 사용한다

	보통 삼항연산자는 메소드의 리턴값에 자주 사용된다.

- 반복문
	1. 몇 번 반복할 지 알 수 있다.
		for문

	2. 몇 번 반복할 지 알 수 없다.
		while문

메모리구조
Storage Class(저장 기억 부류)

	Stack	Heap		Data영역
변수	지역,매개			전역, static(정적)
초기화	직접			자동, 자동
생명주기	}	직접해제(GC)	new, 프로그램 종료 시
보안성	상			중, 하


배열(index)

	int[] arData = {3, 5, 7, 8, 9}

	index가 0부터 시작하는 이유
	배열명은 시작주소를 가지고 있고 해당 주소를 접근할 때 배열명 + 0으로
	접근하기 때문이다.
	
	자바에서의 정적배열과 동적배열

	자바에는 메모리상 정적배열이 존재하지 않는다.
	모든 배열은 동적 메모리인 Heap메모리에 할당되기 때문이다.
	int x=0
	x = new Scanner(System.in).nextInt();
	int[] arData = new int[x];

메소드(주소)
	메소드는 작성된 코드의 주소값을 담고 있는 저장공간이다.
	
메소드 선언 순서
예) 두 정수의 덧셈
1. 메소드의 이름을 생각한다.
	addFor2Integers(){}

2. 매개변수를 생각한다.
	addFor2Integers(int num1, int num2){}

3. 실행할 문장을 작성한다.
	addFor2Integers(int num1, int num2){
		int result = num1 + num2;
	}	

4. 리턴 값을 생각한다.
	addFor2Integers(int num1, int num2){
		int result = num1 + num2;
		return result;
	}	

5. 리턴 타입을 결정한다.
	int addFor2Integers(int num1, int num2){
		int result = num1 + num2;
		return result;
	}

메소드를 사용하는 목적
1. 재사용(특정성을 부여해서는 안된다)
2. 소스코드 간결화

메소드에서
1.리턴을 해야할 때
	ex)두 정수의 합을 구하는 메소드 선언
	사용하는 부분에 작업의 결과를 알려주어야 할 때

2.리턴을 할 필요 없을 때
	ex)두 정수의 합을 println()으로 출력하는 메소드 선언
	메소드 내에서 모든 작업이 완료되었을 때
-----------------------------------------------------------------
클래스
상속
Casting
추상클래스
인터페이스
예외처리
Object
String
컬렉션 프레임워크
쓰레드
파일입출력














