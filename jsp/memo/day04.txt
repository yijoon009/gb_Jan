JSON
	경량화된 데이터 교환 형식.
	서로 다른 언어들 간 데이터를 주고받을 수 있도록 만들어진 텍스트 기반의 형식이다.
	프로그래밍 언어가 아닌 데이터 표기 방법 중 하나이고 기본적으로 name:value형태의
	구조를 가지고 있다.

1. JAVA
	- 외부에서 전달받은 JSONString을 JSONObject타입으로 변환하여 DB작업 진행
	- DB조회의 결과를 외부에 전달할 때 JSONObject 혹은 JSONArray타입으로 저장하고
	  toJSONString()을 사용하여 String타입으로 변환 후 전달

2. .json
	- JSON데이터가 들어있는 파일

3. uri(REST)
	- 어떠한 데이터를 가리키고 있는 고유 주소
	- default는 xml형식으로 데이터가 보이고, uri뒤에 .json을 붙이면 json으로 데이터를
	  확인할 수 있다.


- 객체 생성 (JSONObject)
	JSON은 맵 구조이기 때문에 key값과 value값이 쌍을 이뤄 저장된다.
	따라서 name이라는 key와 value가 한 쌍을 이뤄 저장된다.
	내부 JSON 객체에는 요소들을 put(k,v)을 사용해서 넣어주고,
	외부 JSON 객체로 만든 후 하나로 묶어서 관리한다.
	
	{

		외부 JSON요소 이름 : {
			내부 JSON요소 이름 : 요소 값,
			...
		},
		...
	}

	따라서 JSON은 내부에서 외부 순서대로 데이터를 생성하게 된다.


- 객체 파싱 (JSONParser)
	JSON객체에 있는 정보를 문자열로 전송받았을 때 파싱 작업이 필요하다.
	이 때 데이터가 망가질 수 있기 때문에 별도의 예외처리를 해주어야 한다.
	생성 시 내부에서 외부로 생성했다면 반대로 외부에서 내부 순서대로 접근해야 한다.

	JSONParser 파서객체명 = new JSONParser();
	JSONObject 객체명 = (JSONObject) 파서객체명.parse(JSON객체.toJSONString());

	객체명.get(K) == value 값

------------------------------------


쿠키(Cookie) (주로 비회원)
	웹 브라우저가 보관하고 있는 데이터로, 웹 서버에 요청을 보낼 때 쿠키글
	헤더에 담아서 전송한다. 웹 브라우저는 쿠키가 삭제되기 전까지 웹 서버에 
	쿠키를 전송한다.

-장단점
	클라이언트의 일정 볼터에 정보를 저장하기 때문에 서버의 부하를 줄일 수 있다.
	정보가 사용자 컴퓨터에 저장되기 때문에 보안에 위협받을 수 있다.
	데이터 저장 용량에 한계가 있다.
	일반 사용자가 브라우저 내의 기능인 "쿠키 차단"을 사용했을 경우 쿠키는
	무용지물이 된다.

1. 동작 방식
	1) 쿠키 생성 : 웹 서버에서 쿠키를 생성하고, 쿠키에 응답 데이터를 담아서 웹 브라우저에 전송한다.
	2) 쿠키 저장 : 웹 브라우저는 응답 데이터를 담고 있는 쿠키를 메모리나 파일로 저장한다.
	3) 쿠키 전송 : 웹 브라우저는 쿠키 요청이 있을 때마다 웹 서버에 전송한다.
		     웹 서버는 쿠키를 사용해서 필요한 작업을 수행할 수 있다.
	
(※프로그램 더블클릭> 응용체제에 들어가서 하드웨어에 적절한 전기신호 보내준다.)

2. 쿠키 생성 및 사용방식
	1) 쿠키를 생성하고 response객체에 담는다.
		Cookie cookie = new Cookie("쿠키이름","쿠키값");
		response.addCookie(cookie);

		*인코딩이 필요할 때
		String str = URLEncoder.encode("값","UTF-8");
		Cookie cookie = new Cookie("쿠키이름",str);
		response.addCookie(cookie);

	2) 쿠키 유무를 확인하고 쿠키의 값을 얻어온다.
		String cookie = request.getHeader("Cookie");
		if(cookie != null){
			Cookie[] cookies = request.getCookies();
			for(Cookie  : cookies){
				c.getName();
				c.getValue();
			}
		}

	3) 쿠키를 삭제한다.
		String cookie = request.getHeader("Cookie");
		if(cookie != null){
			Cookie[] cookies = request.getCookies();
			for(Cookie c : cookies){
				c.setMaxAge(0);
				response.addCookie(c);
			}
		}		


----------------------------------------------------------------

세션(Session)
	내장 객체로서 브라우저마다 한 개씩 존재하고, 고유한 SessionID생성 후 정보를 추출한다.

	장단점
		JSP에서만 접근할 수 있기 때문에 보안성이 좋고, 저장 용량의 한계가 거의 없다.
		서버에 데이터를 저장하므로 서버에 부하가 걸릴 수 있다.

*쿠키보다 세션을 쓰는 것이 더 안정적이지만 세션을 저장할 공간이 부족할 경우 쿠키가 사용된다.
*삭제되거나 수정되어도 문제가 없는 데이터 혹은 개인의 고유한 정보들은 보통 쿠키를 사용한다.

-------------------------------------------------------------------

DBCP(DataBase Connection Pool)
	사용자 요청이 있을때마다 DB연결을 한다면 코드가 복잡해지며,
	많은 요청이 있ㅇ르 때 연결속도가 저하될 수 있다. 따라서 미리 Connection을
	만들어 두고, 필요 시 저장된 공간에서 가져다 쓴 후 반환하는 기법이다.


JNDI(Java Naming and Directory Interface)
	디렉터리 서비스에서 제공하는 데이터 및 객체를 발견하고 참고하기 위한 자바 API이며,
	외부에 있는 객체를 가져오기 위한 기술이다.

-------------------------------------------------------------------



















