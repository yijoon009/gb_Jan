웹 서버(http) : 아파치
	사용자의 요청이 정적 데이터인지 동적 데이터인지 판단한다.
	정적 데이터일 경우 이미 준비된 HTML문서를 그대로 응답해주며,
	동적 데이터라면 웹 컨테이너에 요청을 보낸다.

웹 컨테이너(서블릿 컨테이너)
	사용자의 동적 데이터를 JSP, 서블릿으로 연산 및 제어, DB 접근 등을 통해
	정제된 데이터(정적 데이터)로 가공 후 이를 응답해준다.

WAS(Web Application Server) : 톰캣
	동적 데이터를 처리할 서블릿을 메모리에 할당하며, web.xml을 참조하여
	해당 서블릿에 대한 Thread를 생성한다. 서블릿 요청과 서블릿 응답 객체 생성 후
	서블릿에 전달한다.

서블릿(Servlet)
	Java 코드 안에 HTML 코드를 작성할 수 있는 JAVA 프로그램이다.
	Thread에 의해 서블릿에 있는 service()메소드가 호출된다.
	전송 방식 요청에 맞게 doGet() 또는 doPost()메소드를 호출한다.
	-doGet(HttpServletRequest req, HttpServletResponse resp){}
	-doPost(HttpServletRequest req, HttpServletResponse resp){}

	WAS는 Response 객체를 HttpResponse형태(정적 데이터)로 바꿔서 웹 서버에 전달하고
	생성된 Thread를 종료해준다. 그 후에 HttpServletRequest와 HttpServletResponse를
	제거한다.

JSP(Java Server Page)
	HTML을 중심으로 자바와 같이 연동하여 사용하는 웹 언어이다.
	HTML 코드 안에 JAVA코드를 작성할 수 있는 언어이다. (개발적으로 코딩할때 용이한다.)

※ 서블릿에서 HTML을 작성하는 것보다 JSP에서 JAVA를 작성하는 것이 편하기 때문에
   서블릿을 단독으로 사용하지 않고, JSP를 사용한다.

----------------------------------------------

[계산기 만들기 실습]
1. calc.jsp, Result.java(서블릿), Calc.java(클래스) 생성
2. calc.jsp에서 input 태그로 수식 통채로를 입력받고(예: 2*9) action은 Result 서블릿으로 설정해준다.
3. calc.java(클래스)에 사칙연산 메소드를 정의한다 (모두 두 정수를 전달받은 후 int로 리턴해준다).
4. 나눗셈 메소드에는 분모가 0일 경우를 처리하지 않고, Result.java(서블릿)에서 나눗셈 메소드 사용 시 예외처리를 해준다.
5. Result.java(서블릿)에서 전달받은 수식을 분석한 후 사칙연산 연산자에 맞게 Calc.java의 메소드를 호출하여 결과를 출력해준다.

※request.getParameter("태그name")으로 전달받은 값을 가져올 수 있다(통채로가 전달받은 값).
※수식으로부터 연산자를 split()으로 분리할 때에는 split("\\"+연산자)으로 사용해야 오류없이 분리된다.("\\+")
※잘못 입력했을 때와 0으로 나눌 때 모두 예외처리를 사용하여 알맞는 메세지를 출력해준다.

6.Result.java(서블릿)에서 calc.jsp로 돌아갈 때에는 calc.jsp가 아닌 calc로 이동할 수 있도록 web.xml 설정을 작성해준다.

9*
9+9+9

----------------------------------------------------

디렉티브 태그
	<%@ page%>
		현재 JSP 페이지에 대한 정보를 설정하는 태그이다.
		되도록 페이지 최상단에 선언한다.

	속성(기본값)

	1. language(java) : 현재 JSP페이지가 사용할 프로그래밍 언어
	2. contentType(text/html) : 현재 JSP페이지가 생성할 문서의 콘텐츠 유형
	3. pageEncoding(ISO-8859-1) : 현재 SJP페이지의 문자 인코딩 설정
	4. import : 현재 JSP페이지에서 사용할 자바 패키지 및 클래스 설정
	5. session(true) : 현재 JSP페이지에서 세션 사용 여부 설정
	6. info : 현재 JSP 페이지에 대한 설명을 설정
	7. errorPage : 현재 JSP 페이지에 오류가 발생했을 때 보여줄 오류 페이지 설정
	8. isErrorPage(false) : 현재 JSP 페이지가 오류 대체 페이지인지 여부 설정

스크립트 태그
	HTML코드에 자바 코드를 넣어 프로그램이 수행하는 기능을 구현할 수 있다.

	1. 선언문(declaration) : <%! %>
		자바 변수나 메소드를 선언하는 데 사용)

	2. 스크립틀릿(scriptlet) : <% %>
		자바 변수 선언 및 자바 로직 코드를 작성하는 데 사용

	3. 표현문(expression) : <%= %>
		변수, 계산식, 리턴이 있는 메소드 호출 등 값을 작성하여 문자열 형태로 출력.
		세미콜론(;) 사용 금지

--------------------------------------------

include 디렉티브 태그
	<% include file = "파일 경로"%>
	현재 JSP페이지의 특정 영역에 외부 파일의 내용을 포함하는 태그이다.
	보통 header와 footer는 대부분의 페이지에 동일한 내용으로 작성되기 때문에
	유지보수 및 편의를 위해 외부 파일로 만든 후 include하여 사용한다.
	이러한 것을 모듈화라고 한다.

	모듈은 부품이며, 보통 프로그래밍 언어에서는 함수로 만드는 작업을 모듈화라고 한다.
	일회용이 아닌 재사용의 목적으로 만들어 놓을 때를 모듈화 작업이라고 부른다.


---------------------------------------------------

액션태그
	서버나 클라이언트에게 어떤 행동을 하도록 명령하는 태그이다.

	1. forward - <jsp: forward />
		다른 페이지로의 이동, 페이지 흐름을 제어한다.

	2. include - <jsp: include />
		외부 페이지의 내용을 포함하거나 페이지 모듈화.

	3. param - <jsp:param />
		현재 페이지에서 다른 페이지에 정보를 전달한다.















