EL문과 JSTL : 페이지 가독성 상승
	자바 구문을 라이브러리 형태로 만들어 놓고 필요할 때마다 태그로 꺼내 쓰는 기술이다.
	JSP페이지 내에서 자바코드와 HTML코드가 섞여 있으면 가독성이 떨어지고 복잡해진다.
	EL문과 JSTL문을 사용하면 HTML과 태그로만 구성된 일관된 소스코드를 볼 수 있다는
	장점이 있다.

	-EL(Expression Language)
	값을 간결하고 간편하게 출력할 수 있도록 해주는 기술

	자바				EL
	<%=name%>		-->	${name}
	<%=member.getName()%>		${member.getName()}

	값을 찾을 때에는 작은 Scope에서 큰 Scope 순서로 찾는다.
	page < request < session < application

	원하는 스코프의 변수를 찾을 때 아래와 같이 사용한다.
	${param.name} : 전달받은 데이터 중 name을 찾는다.
	${requestScope.name} : request에서만 name을 찾는다.
	${sessionScope.name} : session에서만 name을 찾는다.

	[연산자]
	
	/, div ${10/3} == ${10 div 3}
	%, mod
	&&, and
	||, or
	>, lt(less than)
	<, gt(greater than)
	>= le(less or equal)
	<= ge(greater or equal)
	== eq(equal)
	!= ne (not equal)
	empty (값이 비어있으면 true, 값이 있으면 false)
	!, not

	-JSTL(Jsp Standatd Tag Library)

	연산이나 조건문, 반복문 등을 편하게 처리할 수 있으며, JSP페이지 내에서
	자바코드를 사용하지 않고도 로직을 구현할 수 있도록 효율적인 방법을 제공해준다.

	자바					JSTL
	<%
		for(초기식; 조건식; 증감식;){	-->	<c:forEach var="" items="${}">

		}				</c:forEach>		
	%>			

						<c:forEach var="" begin="" end="">

						</c:forEach>

	1. 라이브러리 다운로드
	      http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/

	      jakarta-taglibs-standard-1.1.2 다운로드

	2. JSP에서 JSTL 사용
		<%@ taglib uri="http://java.sun.com/jstl/core" prefix="c"%>

		위의 태그 추가 오류 시
		<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

	3. core태그의 종류

	<c:set> : 변수에 값 대입
	<c:out> : 값 출력
	<c:if> : if문
	<c:chose> : switch문의 시작
	<c:when> : switch문의 case역할(break까지 해준다)
	<c:otherwise> : switch문의 default 역할
	<c:forEach> : 반복문


<c:out>, ${}의 차이

	EL문만 사용하게 되면, html이나 스크립트가 실행될 수 있기 때문에
	보안상 c:out의 escapeXml옵션을 사용하기 위해서 c:out을 사용한다.
	escapeSml은 default가 true이며 값에 html이나 스크립트가 작성되어도
	실행 가능한 명령어가 아닌 문자열 값으로 인식하게 된다.

	엄격한 태그 규칙을 위해 사용되기도 하며, 모든 표현은 태그 안에 작성하는 것을
	원칙으로 한다.

--------------------------------------------------------------------

[jsp 방식]
	a.jsp --> b.jsp --> c.jsp
	
	각 페이지마다 필요 시 자바코드가 작성되며, DB와 연결하는 코드도 jsp파일 안에서 모두 작성된다.
	분리되어 있지 않기 때문에 규모가 작은 프로젝트에 어울리는 방식이다.
	코드가 확장될 수록 가독성이 떨어지고 분업과 유지보수가 좋지 않다.

MVC

	[model1 방식]
	a.jsp --> b.jsp --> c.jsp
	 	    ↑
		   DAO

	b.jsp에서 dao를 호출함으로써 자바코드가 섞이게 된다. 선언은 분리되어 java페이지에
	구현되기 때문에 jsp 내의 java 코드 양이 줄어들지만 결국 사용은 jsp 페이지에서 하기 때문에
	Controller와 View가 섞이게 된다.
	페이지가 확장될 수록 유지보수가 상대적으로 좋지 않지만 설계는 쉽다.
	
	*[model2 방식]					1.Redirect  2.Forward
	a.jsp --> web.xml --> Front-Controller.java --------------------------->c.jsp
					↕
					↕
					↕
				Controller.java
					↕
					↕
					↕
				    DAO.java
					↕
					↕
					↕
					DB
















