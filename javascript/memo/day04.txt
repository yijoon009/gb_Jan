브라우저 객체 모델(BOM)

자바스크립트를 이용하면 브라우저의 정보에 접근하거나 브라우저의 여러 기능들을 제어할 수 있다.
이 때 사용할 수 있는 객체 모델을 브라우저 객체 모델(BOM, Browser Object Model)이라고 한다.
브라우저 객체 모델은 DOM과 달리 W3C의 표준 객체 모델은 아니다.
하지만 자바스크립트가 브라우저의 긴으적인 요소들을 직접 제어하고 관리할 방법을 제공해준다.
이러한 BOM객체들을 전역 객체로 사용할 수 있다.

window 객체

웹 브라우저의 창을 나타내는 객체로, 대부분의 웹 브라우저에서 지원한다.
자바스크립트의 모든 객체, 전역 함수, 전역 변수들은 자동으로 window객체의
프로퍼티가 되고 window객체의 메소드는 전역함수, window객체의 프로퍼티는
전역변수가 된다.
DOM요소들도 모두 window객체의 프로퍼티가 된다.


//로딩이 다 되고나서 실행된다
window.onload = function(){}
	스크립트 언어는 위에서 아래로 해석되기 때문에 DOM에서 HTML요소를
	추출할 때 body보다 위에 있으면 해석 순서에 오류가 생길 수 있다.
	이 경우 자바스크립트 문서를 밑으로 옮겨야 하는데, html문서가 길어지면,
	가독성이 좋지 않고 불편할 수 있다. 따라서 window.onload를 사용하면
	문서가 준비된 상황 이후에도 발동시킬 수 있다.

window.open() 메소드
	window 객체의 open()메소드를 이용하면, 새로운 브라우저 창을 열 수 있으며,
	새로운 브라우저 창의 세부적인 옵션들도 일일이 설정할 수 있다.

	var 객체명 = window.open(url, name, specs, replace);

	1)객체명: 새로 만들어진 창 객체가 반환되고 창의 생성에 실패하면
		 null을 리턴한다. 이 객체를 통해서 새 창을 제어할 수 있고,
		 객체명.close();로 창을 닫을 수 있다.

	2)url: 주소

	3)name
		- _blank(default) : 새 창(탭)
		- _parent : 부모 프레임
		- _child : 현재 페이지의 자식 페이지(서브 창)
		- _self : 현재 페이지(replace 속성 사용 지양)

	4)specs : 선택적인 값으로 창의 크기, 스크롤 여부, 리사이즈 가능 등의 속성을 지정한다.

		- height = 픽셀 : 창의 높이
		- width = 픽셀 : 창의 너비
	
	5)replace: 히스토리 목록에 새 항복을 만들지, 현재 항목을 대체할 지 지정한다.

		- true : 현재 히스토리 대체
		- false : 히스토리에 새 항목 만들기

//thread.sleep이랑 비슷
window.setTimeout(function(){}, 밀리초);
	밀리초만큼 멈춘 후 실행하는 문법

=============================================

location 객체
	location객체는 현재 브라우저에 표시괸 HTML문서의 주소를 얻거나,
	브라우저에 새 문서를 불러올 때 사용할 수 있다.
	location객체의 프로퍼티와 메소드를 이용하면, 현재 문서의 URL 주소를
	다양하게 해석하여 처리할 수 있게 된다.

	-href : 페이지의 URL 전체 정보 반환. URL을 지정하여 페이지 이동 가능.

	1. document.write(location.href);	//현재 페이지 정보 반환
	2. location.href = "주소 또는 파일 경로"; 	//작성한 경로 페이지로 이동

	- pathname : URL경로 부분의 정보를 반환한다.
	- port : 포트번호를 반환한다.
	- reload() : 새로고침

	- assign() : 현재 URL을 지정한 URL로 바꿔 페이지 이동.
	- replace(): 현재 URL을 지정한 URL로 바꾸고 이전 페이지로 돌아갈 수 없게 한다.

	assign()
		A페이지 -> B페이지 -> C페이지
				<-뒤로가기 시 B페이지로 이동

	replace()
		A페이지 -> B페이지 -> C페이지
			      <-뒤로가기 시 A페이지로 이동


=========================================

history객체
	history 객체는 브라우저의 히스토리 정보를 문서와 문서 상태목록으로 저장하는 객체이다.
	
	-go(n) : 0부터 시작
	
	go(1) : 앞 페이지로 이동(n은 n페이지 앞으로 이동)
	go(-1) : 뒤 페이지로 이동(-n은 n페이지 뒤로 이동)


=======================================

jQuery
	요소들을 선택하는 강력한 방법을 사용하고 선택된 요소들을
	효율적으로 제어할 수 있는 자바스크립트 라이브러리

	"//code.jquery.com/jquery-3.4.1.min.js"

jQuery 기본 문법
	$("선택자")

	-아이디 선택자 : %("#아이디명")
	-태그 선택자 : $("태그명")
	-클래스 선택자 : $(".클래스명")
	-속성 선택자 : $("태그명[속성명='속성값']")
		예) $("textarea[name='result']")

값 가져오기
	
	$("선택자").val()		//textarea와 input만 값 가져오기 가능
	$("선택자").text()	//이외의 태그들 값 가져올수 있다.

컨텐츠 변경
	$("선택자").text("새로운 값")

반복문
	$.each(iterator, function(index, item){
		실행할 문장
	});

	iterator.forEach(function(element){
		element.프로퍼티
	});

jQuery를 사용하면, 순수 Javascript에 비해 속도가 드려진다.
하지만 간결한 문법으로 인해 개발 속도 증가와 처리비용 감소에 대한 장점이 있으며,
60%이상의 웹 사이트에서 사용하고 있기 때문에 적절한 상황에 맞춰서 사용할 줄
알아야 한다. 까다로운 UI 작업일 경우 상대적으로 무거운 jQuery보다는 직접 DOM
스크립트를 사용하기도 한다.

※ 기본적으로 DOM 접근을 최소화하는 것이 성능상 좋다.






